#include <iostream>
using namespace std;
/*
	存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。
	存储类有：auto,register,static,extern,mutable,thread_local

	auto 关键字用于两种情况：
	1.声明变量时根据初始化表达式自动推断该变量的类型
	2.声明函数时函数返回值的占位符。

	register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。
	这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）。
	寄存器只用于需要快速访问的变量，比如计数器。
	并不保证变量一定存在寄存器中。

	static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。
	因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。
	static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。
	在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。

	extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。
	当使用 'extern' 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。
	当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 extern 来得到已定义的变量或函数的引用。可以这么理解，extern 是用来在另一个文件中声明一个全局变量或函数。
	extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候
*/
auto testAuto() {
	return 't';
}
void testStatic() {
	static int i = 10; // 只会赋值一次
	cout << i << endl;
	i--;
}
void storage() {
	auto d = 3.14;
	auto s = "test";
	auto iPtr = new auto(9);
	cout << *iPtr << " : " << typeid(iPtr).name() << endl;
	cout << s << " : " << typeid(s).name() << endl;
	cout << testAuto() << " : " << typeid(testAuto()).name() << endl;
	testStatic();
	testStatic();
}