#include <iostream>
using namespace std;
/*
	所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。
	不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。
	
	NULL 指针是一个定义在标准库中的值为零的常量。
	它表明该指针不指向一个可访问的内存位置。

	指针的算术运算：
	可以对指针进行四种算术运算：++、--、+、-。
	一个整形指针++后会指向下一个整形地址，即递增32位，--同理
	指针可以用关系运算符进行比较，如 ==、< 和 >。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。

	指针可以和数组互换
	指针可以指向指针
	函数可以用指针作为参数
	函数可以返回指针，但指针不能指向局部变量，除非局部变量有static修饰
*/
void pointer() {
	int* i = NULL;
	if (!i)
	{
		cout << "pointer is null" << endl;
		cout << NULL << endl;
	}
}